--controls and organizes the flow of the game by managing different states
--this has the added bonus of being a "save point" that the script can safely return to when loaded
--the 'actions' defined in each state are different options that the user might choose
--a generic 'next' can be used to go to the implied next state

stateMachine = {
    ['pre-game'] = {
        ['next'] = 'begin turn'
    },
    ['begin turn'] = {
        ['next'] = 'reward fairy'
    },
    ['reward fairy'] = {
        ['next'] = 'eliminate oldest flea'
    },
    ['eliminate oldest flea'] = {
        ['next'] = 'awaiting tile placement'
    },
    ['awaiting tile placement'] = {
        ['tile placed'] = 'check added tile features'
    },
    ['check added tile features'] = {
        ['next'] = 'check added tile special figure extension'
    },
    ['check added tile special figure extension'] = {
        ['next'] = 'check added tile feature - hill'
    },
    ['check added tile feature - hill'] = {
        ['next'] = 'check added tile feature - wheel of fortune'
    },
    ['check added tile feature - wheel of fortune'] = {
        ['plague'] = 'check added tile feature - wheel of fortune - plague',
        ['crown'] = 'check added tile feature - wheel of fortune - crown',
        ['next'] = 'check added tile feature - volcano'
    },
    ['check added tile feature - wheel of fortune - plague'] = {
        ['next'] = 'check added tile feature - wheel of fortune - crown',
        ['figures returned'] = 'check added tile feature - wheel of fortune - plague'
    },
    ['check added tile feature - wheel of fortune - crown'] = {
        ['next'] = 'check added tile feature - volcano',
        ['figures returned'] = 'check added tile feature - volcano'
    },
    ['check added tile feature - volcano'] = {
        ['next'] = 'check added tile feature - princess',
        ['dragon moved'] = 'check added tile feature - volcano - delay'
    },
    ['check added tile feature - volcano - delay'] = {
        ['next'] = 'check added tile feature - volcano - lock'
    },
    ['check added tile feature - volcano - lock'] = {
        ['next'] = 'check added tile feature - princess'
    },
    ['check added tile feature - princess'] = {
        ['next'] = 'check added tile feature - magic portal'
    },
    ['check added tile feature - magic portal'] = {
        ['next'] = 'check added tile feature - gold'
    },
    ['check added tile feature - gold'] = {
        ['next'] = 'awaiting figure decision',
        ['has gold'] = 'place gold on tile'
    },
    ['place gold on tile'] = {
        ['next'] = 'awaiting gold placement'
    },
    ['awaiting gold placement'] = {
        ['next'] = 'awaiting figure decision'
    },
    ['awaiting figure decision'] = {
        ['skip figure'] = 'post figure events',
        ['retrieve abbot'] = 'retrieve abbot',
        ['placed figure'] = 'post figure events',
        ['placed shepherd'] = 'initialize shepherd',
        ['placed flier'] = 'wait for flier roll',
        ['placed tower'] = 'prompt tower capture',
        ['placed phantom'] = 'post phantom events',
        ['placed fairy'] = 'post figure events',
        ['seduce knight'] = 'seduce knight'
    },
    ['retrieve abbot'] = {
        ['figures returned'] = 'post figure events'
    },
    ['wait for flier roll'] = {
        ['die rolled'] = 'check flier destination'
    },
    ['check flier destination'] = {
        ['feature available'] = 'awaiting flier decision',
        ['feature unavailable'] = 'return flier'
    },
    ['return flier'] = {
        ['figures returned'] = 'post figure events'
    },
    ['awaiting flier decision'] = {
        ['placed flier'] = 'post figure events'
    },
    ['prompt tower capture'] = {
        ['skip capture'] = 'post figure events',
        ['return follower'] = 'tower - return follower',
        ['capture follower'] = 'tower capture - delay'
    },
    ['tower - return follower'] = {
        ['figures returned'] = 'post figure events'
    },
    ['tower capture - delay'] = {
        ['next'] = 'tower capture - exchange prisoners'
    },
    ['tower capture - exchange prisoners'] = {
        ['next'] = 'post figure events',
        ['return followers'] = 'tower capture - return exchanged prisoners'
    },
    ['tower capture - return exchanged prisoners'] = {
        ['figures returned'] = 'tower capture - recreate buttons'
    },
    ['tower capture - recreate buttons'] = {
        ['next'] = 'post figure events'
    },
    ['seduce knight'] = {
        ['figures returned'] = 'post phantom events' --per CAR 445, cannot place any figure, including a phantom, after seducing a knight
    },
    ['initialize shepherd'] = {
        ['next'] = 'initialize shepherd - finish'
    },
    ['initialize shepherd - finish'] = {
        ['next'] = 'post figure events'
    },
    ['post figure events'] = {
        ['has lake'] = 'post figure events - place ferry',
        ['move ferry'] = 'post figure events - move ferry 1',
        ['next'] = 'post figure events - phantom'
    },
    ['post figure events - place ferry'] = {
        ['move ferry'] = 'post figure events - move ferry 1',
        ['next'] = 'post figure events - phantom'
    },
    ['post figure events - move ferry 1'] = {
        ['next'] = 'post figure events - move ferry 2'
    },
    ['post figure events - move ferry 2'] = {
        ['next'] = 'post figure events - move ferry 3'
    },
    ['post figure events - move ferry 3'] = {
        ['next'] = 'post figure events - move ferry 4'
    },
    ['post figure events - move ferry 4'] = {
        ['next'] = 'post figure events - phantom'
    },
    ['post figure events - phantom'] = {
        ['has phantom'] = 'awaiting phantom decision',
        ['has no phantom'] = 'post phantom events'
    },
    ['awaiting phantom decision'] = {
        ['skip figure'] = 'post phantom events',
        ['placed figure'] = 'post phantom events',
        ['placed flier'] = 'wait for flier roll - phantom',
    },
    ['wait for flier roll - phantom'] = {
        ['die rolled'] = 'check flier destination - phantom'
    },
    ['check flier destination - phantom'] = {
        ['feature available'] = 'awaiting flier decision - phantom',
        ['feature unavailable'] = 'return flier - phantom'
    },
    ['return flier - phantom'] = {
        ['figures returned'] = 'post phantom events'
    },
    ['awaiting flier decision - phantom'] = {
        ['placed flier'] = 'post phantom events'
    },
    ['post phantom events'] = {
        ['next'] = 'post figure event - prompt shepherd'
    },
    ['post figure event - prompt shepherd'] = {
        ['next'] = 'check added tile feature - dragon'
    },
    ['check added tile feature - dragon'] = {
        ['has dragon'] = 'post figure event - dragon movement',
        ['no dragon'] = 'check added tile feature extensions'
    },
    ['post figure event - dragon movement'] = {
        ['next'] = 'check added tile feature extensions',
        ['figures returned'] = 'post figure event - dragon movement - delay',
        ['dragon moved'] = 'post figure event - dragon movement - delay'
    },
    ['post figure event - dragon movement - delay'] = {
        ['next'] = 'post figure event - dragon movement - lock'
    },
    ['post figure event - dragon movement - lock'] = {
        ['next'] = 'post figure event - dragon movement'
    },
    ['check added tile feature extensions'] = {
        ['next'] = 'prompt moving from carcassonne'
    },
    ['prompt moving from carcassonne'] = {
        ['next'] = 'score features',
        ['skip figure'] = 'prompt moving from carcassonne',
        ['placed figure'] = 'prompt moving from carcassonne'
    },
    ['score features'] = {
        ['next'] = 'post scoring events',
        ['figures returned'] = 'score features'
    },
    ['post scoring events'] = {
        ['next'] = 'reward gold'
    },
    ['reward gold'] = {
        ['next'] = 'replace finished wagons'
    },
    ['replace finished wagons'] = {
        ['next'] = 'prompt moving to carcassonne',
        ['skip figure'] = 'replace finished wagons',
        ['placed figure'] = 'replace finished wagons'
    },
    ['prompt moving to carcassonne'] = {
        ['not eligible'] = 'check for extra builder turn',
        ['skip figure'] = 'check for extra builder turn',
        ['placed figure'] = 'prompt moving count'
    },
    ['prompt moving count'] = {
        ['not eligible'] = 'check for extra builder turn',
        ['skip figure'] = 'check for extra builder turn',
        ['placed figure'] = 'check for extra builder turn'
    },
    ['check for extra builder turn'] = {
        ['has builder'] = 'awaiting tile placement',
        ['no builder'] = 'end turn'
    },
    ['end turn'] = {
        ['next'] = 'begin turn'
    },
    ['game over - prompt moving from carcassonne'] = {
        ['next'] = 'game over - scoring',
        ['skip figure'] = 'game over - prompt moving from carcassonne',
        ['placed figure'] = 'game over - prompt moving from carcassonne'
    },
    ['game over - scoring'] = {
        ['next'] = 'game over - scoring',
        ['figures returned'] = 'game over - scoring',
        ['finished'] = 'game over - finished'
    },
    ['game over - finished'] = {}
}
function stateHandler()
    if controlPanelSettings[activePlayers[currentPlayer] .. 'Control'] ~= nil and controlPanelSettings[activePlayers[currentPlayer] .. 'Control']:sub(1,2) == 'AI' then
        return AIStateHandler()
    else
        return playerStateHandler()
    end
end

function playerStateHandler()
    --debugMessage(1, "stateHandler - " .. turnState)
    if turnState == 'begin turn' then
        printScoreToNotes()
        if controlPanelSettings[activePlayers[currentPlayer] .. 'Control'] == nil and Player[activePlayers[currentPlayer]].seated == false then
            allGameMessage({"MESSAGE_STATE_NEW_TURN_PLAYER_MISSING", {'{c1}', translate(activePlayers[currentPlayer])}}, player_color_tints[activePlayers[currentPlayer]])
            return
        end
        if controlPanelSettings[activePlayers[currentPlayer] .. 'Control'] == nil then
            allGameMessage({"MESSAGE_STATE_NEW_TURN", {'{p1}', translate(getPlayerOwnerName(activePlayers[currentPlayer]))}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
        else
            allGameMessage({"MESSAGE_STATE_NEW_TURN", {'{p1}', translate(activePlayers[currentPlayer])}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
            allGameMessage({"MESSAGE_STATE_NEW_TURN_CONTROL", {'{c1}', translate(activePlayers[currentPlayer])}, {'{p1}', stringToBracketedHex(getPlayerOwner(activePlayers[currentPlayer])) .. getPlayerOwnerName(activePlayers[currentPlayer]) .. stringToBracketedHex(activePlayers[currentPlayer])}}, player_color_tints[activePlayers[currentPlayer]], nil)
        end
        TnBBuilderClearTakenBuilderTile()
        flierBeginTurn()
        confirmationDisplayed = false
        AnMBeginTurn()
        lastPlacedTileX = nil
        lastPlacedTileZ = nil
        highlightLastPlacedTiles()
        towerBeginTurn()
        return nextState('next')
    elseif turnState == 'reward fairy' then
         PnDFairyReward()
        return nextState('next')
    elseif turnState == 'eliminate oldest flea' then
        return nextState('next')
    elseif turnState == 'awaiting tile placement' then
        --if a builder allowed a player to place another tile, the turnState will return here
        --reset magic portal here so that the builder tile will not be restricted from using the portal: https://github.com/DinnerBuffet/TTSCarcassonne/issues/7
        PnDSetAlreadyUsedMagicPortal(false)
        earnedPointsThisTile = {}
        return
    elseif turnState == 'check added tile features' then
        highlightLastPlacedTiles()
        buriedTile = nil
        PnDClearAddedTileFeature()
        currentPlayerAbbot = nil
        HaSShepherdClearAddedTileFeature()
        TnBBuilderClearAddedTileFeature()
        return nextState('next')
    elseif turnState == 'check added tile special figure extension' then
        checkAddedTileSpecialFigureExtensions()
        return nextState('next')
    elseif turnState == 'check added tile feature - hill' then
        if not HaSCheckTileForHill() then
            return nextState('next')
        else
            return
        end
    elseif turnState == 'check added tile feature - wheel of fortune' then
        return checkTileForWheel()
    elseif turnState == 'check added tile feature - wheel of fortune - plague' then
        return resolvePlague()
    elseif turnState == 'check added tile feature - wheel of fortune - crown' then
        return rewardCrownSpaces()
    elseif turnState == 'check added tile feature - volcano' then
        local state = PnDCheckTileForVolcano(lastPlacedTileX, lastPlacedTileZ)
        if state == 1 then
            return -- waiting for figures to be returned
        elseif state == 2 then
            return nextState('dragon moved')
        else
            return nextState('next')
        end
    elseif turnState == 'check added tile feature - volcano - delay' then
        Timer.create({identifier=os.clock(), function_name='progressState', function_owner=nil, parameters=nil, delay=2.00})
    elseif turnState == 'check added tile feature - volcano - lock' then
        PnDDragonLock()
        return nextState('next')
    elseif turnState == 'check added tile feature - princess' then
        PnDCheckTileForPrincess(lastPlacedTileX, lastPlacedTileZ)
        return nextState('next')
    elseif turnState == 'check added tile feature - magic portal' then
        PnDCheckTileForMagicPortal(lastPlacedTileX, lastPlacedTileZ)
        return nextState('next')
    elseif turnState == 'check added tile feature - gold' then
        goldCheckTileForGold()
        return nextState('next')
    elseif turnState == 'place gold on tile' then
        goldAddGoldToTile(lastPlacedTileX, lastPlacedTileZ)
        nextState('next')
    elseif turnState == 'awaiting gold placement' then
        gameNotification({"MESSAGE_GOLD_MINES_PLACE_GOLD_PROMPT"}, NEUTRAL_COLOR, activePlayers[currentPlayer])
        return goldDisplayButtons()
    elseif turnState == 'awaiting figure decision' then
        gameNotification({"MESSAGE_FIGURE_PROMPT"}, NEUTRAL_COLOR, activePlayers[currentPlayer])

        confirmationDisplayed = false
        local hasFairyLocation = false
        local objs = getObjectFromGUID(PLAY_AREA_SCRIPTING_ZONE_GUID).getObjects()
        for _, obj in ipairs(objs) do
            if obj.getVar('owner') == activePlayers[currentPlayer] and table.contains(FOLLOWER_TYPES, obj.getVar('figureName')) then
                local xIndex, zIndex, _, _ = getFigureTileLocation(obj)
                if tileGridOccupied(xIndex, zIndex) then
                    hasFairyLocation = true
                end
            end
        end
        if hasFairyLocation then
            PnDFairyHighlight()
        end
        return displayFigureButtons()
    elseif turnState == 'retrieve abbot' then
        return
    elseif turnState == 'wait for flier roll' or turnState == 'wait for flier roll - phantom' then
        clearFigureOptions()
        flierHighlightTileOn()
        clearArbitraryButtons()
        gameNotification({"MESSAGE_FLIER_DIE_PROMPT"}, NEUTRAL_COLOR, activePlayers[currentPlayer])
        return
    elseif turnState == 'check flier destination' or turnState == 'check flier destination - phantom' then
        if flierCheckDestination() then
            nextState('feature available')
        else
            return nextState('feature unavailable')
        end
    elseif turnState == 'awaiting flier decision' or turnState == 'awaiting flier decision - phantom' then
        flierHighlightTileOff()
        gameNotification({"MESSAGE_FLIER_PROMPT"}, NEUTRAL_COLOR, activePlayers[currentPlayer])
        return
    elseif turnState == 'prompt tower capture' then
        clearFigureOptions()
        capturableFollowers = {}
        if not towerPromptTowerCapture() then
            return nextState('skip capture')
        end
        return
    elseif turnState == 'tower - return follower' then
        return returnFigures()
    elseif turnState == 'tower capture - delay' then
        Timer.create({identifier=os.clock(), function_name='progressState', function_owner=nil, parameters=nil, delay=FIGURE_CAPTURE_DELAY})
    elseif turnState == 'tower capture - exchange prisoners' then
        local numPrisoners = towerExchangePrisoners()
        if numPrisoners == 0 then
            return nextState('next')
        elseif numPrisoners == 1 then
            return nextState('return followers')
        end
    elseif turnState == 'tower capture - return exchanged prisoners' then
        return returnFigures()
    elseif turnState == 'tower capture - recreate buttons' then
        towerCreateRansomButtons()
        return nextState('next')
    elseif turnState == 'initialize shepherd' then
        clearFigureOptions()
        HaSAddSheep(getObjectFromGUID(shepherdAwaitingAction))
        return
    elseif turnState == 'initialize shepherd - finish' then
        shepherdAwaitingAction = nil
        return nextState('next')
    elseif turnState == 'seduce knight' then
        return returnFigures()
    elseif turnState == 'return flier' or turnState == 'return flier - phantom' then
        flierHighlightTileOff()
        return returnFigures()
    elseif turnState == 'post figure events' or turnState == 'post phantom events' then
        clearFigureOptions()
        PnDClearSeducedKnights()
        currentPlayerAbbot = nil
        if turnState == 'post figure events' then
            local tile = tileGrid[lastPlacedTileX][lastPlacedTileZ]
            if ferryCheckTileForLake(tile) then
                return nextState('has lake')
            elseif ferryCheckMove() then
                return nextState('move ferry')
            end
        end
        return nextState('next')
    elseif turnState == 'post figure events - place ferry' then
        gameNotification({"MESSAGE_LAKE_PLACE_FERRY_PROMPT"}, NEUTRAL_COLOR, activePlayers[currentPlayer])
        return ferryDisplayButtons(lastPlacedTileX, lastPlacedTileZ)
    elseif turnState == 'post figure events - move ferry 1' then
        ferrySearchSide(1)
    elseif turnState == 'post figure events - move ferry 2' then
        ferrySearchSide(2)
    elseif turnState == 'post figure events - move ferry 3' then
        ferrySearchSide(3)
    elseif turnState == 'post figure events - move ferry 4' then
        ferrySearchSide(4)
    elseif turnState == 'post figure events - phantom' then
        getActiveFigures()
        if baselineFigures[activePlayers[currentPlayer]]['Phantom'] then
            return nextState('has phantom')
        else
            return nextState('has no phantom')
        end
    elseif turnState == 'awaiting phantom decision' then
        gameNotification({"MESSAGE_PHANTOM_PROMPT"}, NEUTRAL_COLOR, activePlayers[currentPlayer])
        return displayPhantomButtons()
    elseif turnState == 'post figure event - prompt shepherd' then
        if HaSPromptShepherd() then
            return
        else
            return nextState('next')
        end
    elseif turnState == 'check added tile feature extensions' then
        checkAddedTileFeatureExtensions()
        return nextState('next')
    elseif turnState == 'prompt moving from carcassonne' then
        return CoCPromptMovingFromCarcassonne()
    elseif turnState == 'check added tile feature - dragon' then
        shepherdAwaitingAction = nil
        if PnDCheckTileForDragon(lastPlacedTileX, lastPlacedTileZ) then
            return nextState('has dragon')
        else
            nextState('no dragon')
        end
    elseif turnState == 'post figure event - dragon movement' then
        if currentMiniTurn > #activePlayers then currentMiniTurn = 1 end
        if PnDIsDragonMovesRemaining() then
            PnDHighlightIllegalDragonTiles(true)
            if not PnDCreateDragonButtons() then
                return nextState('next')
            end
            return
        else
            return nextState('next')
        end
    elseif turnState == 'post figure event - dragon movement - delay' then
        Timer.create({identifier=os.clock(), function_name='progressState', function_owner=nil, parameters=nil, delay=1.00})
    elseif turnState == 'post figure event - dragon movement - lock' then
        PnDDragonLock()
        return nextState('next')
    elseif turnState == 'score features' then
        clearFigureOptions()
        currentMiniTurn = nil
        PnDHighlightIllegalDragonTiles(false)
        return scoreFeatures()
    elseif turnState == 'post scoring events' then
        return nextState('next')
    elseif turnState == 'reward gold' then
        tempGoldCounts = goldGetGold()
        return goldRewardGold()
    elseif turnState == 'replace finished wagons' then
        if AnMReplaceFinishedWagons() then
            return nextState('next')
        else
            return
        end
    elseif turnState == 'prompt moving to carcassonne' then
        clearFigureOptions()
        if not CoCPromptMovingToCarcassonne() then
            return nextState('not eligible')
        end
    elseif turnState == 'prompt moving count' then
        clearFigureOptions()
        if not KnRBPromptMovingCount() then
            return nextState('not eligible')
        end
    elseif turnState == 'check for extra builder turn' then
        CoCLockCount()
        clearArbitraryButtons(true)
        if TnBCheckBuilderAwaitingAction(activePlayers[currentPlayer]) then
            return nextState('has builder')
        else
            return nextState('no builder')
        end
    elseif turnState == 'end turn' then
        return endTurn()
    elseif turnState == 'game over - prompt moving from carcassonne' then
        return CoCPromptMovingFromCarcassonne()
    elseif turnState == 'game over - scoring' then
        clearFigureOptions()
        return scoreFeatures()
    end
end

function nextState(action)
    if action == nil then action = 'next' end
    if stateMachine[turnState] ~= nil then
        if stateMachine[turnState][action] ~= nil then
            turnState = stateMachine[turnState][action]
            return stateHandler()
        else
            allErrorMessage({"MESSAGE_ERROR_NO_ACTION_FOR_STATE", {'{s1}', action}, {'{s2}', turnState}}, activePlayers[currentPlayer])
        end
    else
        allErrorMessage({"MESSAGE_ERROR_NO_STATE", {'{s1}', turnState}}, activePlayers[currentPlayer])
    end
end

function gameIsActive()
    if turnState == 'pre-game' or turnState == 'game over - prompt moving from carcassonne' or turnState == 'game over - scoring' or turnState == 'game over - finished' then
        return false
    else
        return true
    end
end

function progressState()
    return nextState('next')
end

function progressPartiallyCompleteStates()
    if turnState == 'score features' then
        allGameMessage({"MESSAGE_GAME_LOADED_DURING_SCORING"}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
        turnState = 'post scoring events'
    end
end
