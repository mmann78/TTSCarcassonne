--Here are all of the events triggered by TTS. These are the entry points to all of the code.

--onload and onsave
--
--manages save games by saving script data in onsave and restoring it in onload
--onload also re-creates global game buttons and  returns to the previously saved state once loading is finished.
--NOTE: the game is not considered 100% save compatible due to issues with the TTS API
--for example, an object in the middle of a setPositionSmooth will not continue moving when loaded
--though whenever the game is awaiting user interaction, it should be 99% save compatible

function onload(save_state)
    getObjectFromGUID(PLAY_AREA_SCRIPTING_ZONE_GUID).setPosition({['x']=0,['y']=2.73,['z']=0})
    -- Also the starting tile (c107f0) should be moved down to TABLE_SURFACE_Y (0.9736049) to match other placed tiles

    if save_state ~= nil then
        local saved_data = jsondecode(save_state)
        featureList = saved_data.featureList
        linkedFeatures = saved_data.linkedFeatures
        featureIndex = saved_data.featureIndex
        aiCurrentTile_GUID = saved_data.aiCurrentTile_GUID
        aiChosenFigure_GUID = saved_data.aiChosenFigure_GUID
        aiHighestScorePos = saved_data.aiHighestScorePos
        buriedTiles = saved_data.buriedTiles
        tilesRemaining = saved_data.tilesRemaining
        buriedTileCount = saved_data.buriedTileCount
        controlPanelSettings = saved_data.controlPanelSettings
        showMarkers = saved_data.showMarkers
        tileGrid = saved_data.tileGrid
        riverLoadData(saved_data)
        AnMLoadData(saved_data)
        TnBLoadData(saved_data)
        KnRBLoadData(saved_data)
        PnDLoadData(saved_data)
        towerLoadData(saved_data)
        HaSLoadData(saved_data)
        flierLoadData(saved_data)
        ferryLoadData(saved_data)
        finalTile_GUID = saved_data.finalTile_GUID
        lastPlacedTileX = saved_data.lastPlacedTileX
        lastPlacedTileZ = saved_data.lastPlacedTileZ
        lastPlacedPlayerTiles = saved_data.lastPlacedPlayerTiles
        if saved_data.scores ~= nil then
            for player, score in pairs(saved_data.scores) do
                local scoreCounter = getObjectFromGUID(score_counter_guids[player])
                if scoreCounter ~= nil then
                    scoreCounter.Counter.setValue(score)
                end
            end
        end
        figurePositions = saved_data.figurePositions
        activePlayers = saved_data.activePlayers
        currentPlayer = saved_data.currentPlayer
        scoreSummary = saved_data.scoreSummary
        statsLoadData(saved_data)
        playerPossessionScriptingZones = saved_data.playerPossessionScriptingZones
        player_color_tints = saved_data.player_color_tints
        score_counter_guids = saved_data.score_counter_guids
        figurepad_GUIDs = saved_data.figurepad_GUIDs
        handColor = saved_data.handColor
        player_possession_areas = saved_data.player_possession_areas
        turnState = saved_data.turnState
        carcassonneFigures = saved_data.carcassonneFigures
        wofPigPosition = saved_data.wofPigPosition
        currentMiniTurn = saved_data.currentMiniTurn
        buriedTile = saved_data.buriedTile
        earnedPointsThisTile = saved_data.earnedPointsThisTile
        removedFigures = saved_data.removedFigures
        --if script was in the middle of showing feature markers when the game was saved, delete them after loading
        if saved_data.featureMarker_GUIDs ~= nil then
            for _, featureMarker_GUID in ipairs(saved_data.featureMarker_GUIDs) do
                getObjectFromGUID(featureMarker_GUID).destruct()
            end
        end
    end

    local notes = Notes.getNotebookTabs()
    for _, note in ipairs(notes) do
        if note.title == "Debug Log" then
            debugLogTabIndex = note.index
        end
        if note.title == "Game Log" then
            gameLogTabIndex = note.index
        end
    end
    -- params = {}
    -- params.title = "Debug Log"
    -- params.body = "LOG START"
    -- params.color = "Grey"
    -- debugLogTabIndex = Notes.addNotebookTab(params)

    initializeButtons()
    --setLocalizedObjectNames()

    if activePlayers ~= nil and currentPlayer ~= nil then
        if controlPanelSettings[activePlayers[currentPlayer] .. 'Control'] == nil then
            allGameMessage({"MESSAGE_GAME_LOADED", {'{p1}', getPlayerOwnerName(activePlayers[currentPlayer])}, {'{s1}', turnState}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
        else
            allGameMessage({"MESSAGE_GAME_LOADED", {'{p1}', activePlayers[currentPlayer]}, {'{s1}', turnState}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
            allGameMessage({"MESSAGE_GAME_LOADED_CONTROL", {'{c1}', activePlayers[currentPlayer]}, {'{p1}', stringToBracketedHex(controlPanelSettings[activePlayers[currentPlayer] .. 'Control']) .. getPlayerOwnerName(activePlayers[currentPlayer])}}, player_color_tints[activePlayers[currentPlayer]], nil)
        end
        allGameMessage({"MESSAGE_GAME_LOADED_REWIND_NOTIFICATION"}, NEUTRAL_COLOR)
    else
      -- for i, player in ipairs(getSeatedPlayers()) do
      --   local button_parameters = {}
      --     button_parameters.input_function = 'test_function'
      --     button_parameters.function_owner = Global
      --     button_parameters.label = '(Optional) Player Name - Will use steam name if left empty'
      --     button_parameters.position = {0.0, 0.0, 1.5}
      --     button_parameters.width = 1500
      --     button_parameters.height = 500
      --     button_parameters.font_size = 150
      --     button_parameters.font_color = {1, 0, 0}
      --     button_parameters.alignment = 2
      --     button_parameters.value = ''
      --     getObjectFromGUID(figurepad_GUIDs[player]).createInput(button_parameters)
      -- end
    end
    math.randomseed(os.time())
    progressPartiallyCompleteStates()
    if turnState ~= 'pre-game' then
		if turnState ~= 'game over - scoring' then
			towerCreateRansomButtons()
            highlightLastPlacedTiles()
		end
        return stateHandler()
    end
    getObjectFromGUID(BUTTON_ANCHOR_GUID).interactable = false
end

function onSave()
    --retrieve scores
    local scores = {}
    for player, scoreCounter_GUID in pairs(score_counter_guids) do
        local scoreCounter = getObjectFromGUID(scoreCounter_GUID)
        if scoreCounter ~= nil then
            scores[player] = scoreCounter.Counter.getValue()
        end
    end
    local featureMarker_GUIDs = {}
    if featureMarkers ~= nil then
        for i, featureMarker in ipairs(featureMarkers) do
            featureMarker_GUIDs[i] = featureMarker.getGUID()
        end
    end
    local toSave = {
        activePlayers = activePlayers,
        aiCurrentTile_GUID = aiCurrentTile_GUID,
        aiChosenFigure_GUID = aiChosenFigure_GUID,
        aiHighestScorePos = aiHighestScorePos,
        buriedTile = buriedTile,
        buriedTileCount = buriedTileCount,
        buriedTiles = buriedTiles,
        carcassonneFigures = carcassonneFigures,
        controlPanelSettings = controlPanelSettings,
        currentMiniTurn = currentMiniTurn,
        currentPlayer = currentPlayer,
        earnedPointsThisTile = earnedPointsThisTile,
        featureIndex = featureIndex,
        featureList = featureList,
        featureMarker_GUIDs = featureMarker_GUIDs,
        figurePositions = figurePositions,
        figurepad_GUIDs = figurepad_GUIDs,
        finalTile_GUID = finalTile_GUID,
        handColor = handColor,
        lastPlacedPlayerTiles = lastPlacedPlayerTiles,
        lastPlacedTileX = lastPlacedTileX,
        lastPlacedTileZ = lastPlacedTileZ,
        linkedFeatures = linkedFeatures,
        playerPossessionScriptingZones = playerPossessionScriptingZones,
        player_color_tints = player_color_tints,
        player_possession_areas = player_possession_areas,
        removedFigures = removedFigures,
        scoreSummary = scoreSummary,
        score_counter_guids = score_counter_guids,
        scores = scores,
        showMarkers = showMarkers,
        tileGrid = tileGrid,
        tilesRemaining = tilesRemaining,
        turnState = turnState,
        wofPigPosition = wofPigPosition
    }
    statsSaveData(toSave)
    riverSaveData(toSave)
    AnMSaveData(toSave)
    TnBSaveData(toSave)
    KnRBSaveData(toSave)
    PnDSaveData(toSave)
    towerLoadData(toSave)
    HaSSaveData(toSave)
    flierSaveData(toSave)
    ferrySaveData(toSave)
    return jsonencode(toSave)
end

--this manages some controlPanelSettings, such as hotseats and some settings that are dependent on the number of players
--it should be called before object onPlayerChangedColor scripts are called (VERY IMPORTANT)
function onPlayerChangedColor(player_color)
    local numPlayers = 0
    for _, color in ipairs(PLAYER_COLORS) do
        if Player[color].seated and controlPanelSettings[color .. 'Control'] ~= nil then
            allGameMessage({"MESSAGE_HOTSEAT_TAKEN", {'{p1}', stringToBracketedHex(controlPanelSettings[color .. 'Control']) .. getPlayerOwnerName(color) .. RGBToBracketedHex(NEUTRAL_COLOR)}, {'{c1}', stringToBracketedHex(color) .. translate(color) .. RGBToBracketedHex(NEUTRAL_COLOR)}}, NEUTRAL_COLOR)
            controlPanelSettings[color .. 'Control'] = value
        end
        if controlPanelSettings[color .. 'Control'] ~= nil and controlPanelSettings[color .. 'Control']:sub(1,2) ~= 'AI' and not Player[controlPanelSettings[color .. 'Control']].seated then
            allGameMessage({"MESSAGE_HOTSEAT_OWNER_MOVED", {'{c1}', stringToBracketedHex(color) .. translate(color) .. RGBToBracketedHex(NEUTRAL_COLOR)}, {'{c2}', stringToBracketedHex(controlPanelSettings[color .. 'Control']) .. translate(controlPanelSettings[color .. 'Control']) .. RGBToBracketedHex(NEUTRAL_COLOR)}}, stringColorToRGB(color))
            controlPanelSettings[color .. 'Control'] = nil
        end
        if Player[color].seated or controlPanelSettings[color .. 'Control'] ~= nil then
            numPlayers = numPlayers + 1
        end
    end
    if gameIsActive() then
        if turnState == 'begin turn' and player_color == activePlayers[currentPlayer] then
            return Timer.create({identifier=os.clock(), function_name='currentPlayerControllerChanged', function_owner=Global, parameters={currentPlayer=player_color, newCurrentPlayerControl=controlPanelSettings[player_color .. 'Control']}, delay=2})
        end
        return
    end
    controlPanelSettings['TowerNumTowers'] = NUM_TOWERS_PER_PLAYER[numPlayers]
    if controlPanelSettings['TowerTowers'] then
        allGameMessage({"MESSAGE_TOWER_COUNT_CHANGED", {'{n1}', NUM_TOWERS_PER_PLAYER[numPlayers]}}, NEUTRAL_COLOR, nil)
    end
end

function onObjectSpawn(spawned_object)
    --This is intended to be called when a tile is drawn from the stack.
    if tostring(spawned_object) == 'Card(Clone) (LuaGameObjectScript)' then
        if controlPanelSettings['PnDDragon'] and PnDShouldRedraw(getTileDataForTile(spawned_object).specialFeatures) then
            gameNotification({"MESSAGE_DRAGON_TILE_DRAWN_BEFORE_AWAKENED"}, NEUTRAL_COLOR, activePlayers[currentPlayer])
        end
    end
end

function onObjectDestroyed(dying_object)
    --when the 2nd to last card in the deck is drawn, the deck is destroyed, even though one card remains
    --this causes an issue when a script needs to draw the last card and doesn't know where it is
    --this code is meant to work around that problem
    local needHandling = dying_object.getGUID() == tileStack_GUID or riverIsObjectDestroyed(dying_object)
    if needHandling then
        local allObjects = getAllObjects()
        for _, obj in ipairs(allObjects) do
            if tostring(obj) == 'Card(Clone) (LuaGameObjectScript)' then
                local dX = dying_object.getPosition().x - obj.getPosition().x
                local dZ = dying_object.getPosition().z - obj.getPosition().z
                local rad = 0.01
                if dX<rad and dX>-rad and dZ<rad and dZ>-rad then
                    if obj.held_by_color == nil and obj.getGUID() ~= lastDrawnTile_GUID then
                        if dying_object.getGUID() == tileStack_GUID then
                            finalTile_GUID = obj.getGUID()
                        elseif riverIsObjectDestroyed(dying_object) then
                            riverHandleObjectDestroyed(obj)
                        end
                    end
                end
            end
        end
    end
end


-- Activates whenever any object is dropped
function onObjectDrop(player, droppedObject)
    if turnState == 'pre-game' then
        if tostring(droppedObject) == 'Card(Clone) (LuaGameObjectScript)' then
            if not spamLock then
                playerErrorMessage({"MESSAGE_DROP_GAME_NOT_STARTED"}, player)
                spamLock = true
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
            end
        end
        return
    end
    if turnState == 'game over - finished' then
        --exit early without printing a message
        return
    end
    -- exit early if the player placing the object does not currently have a turn.
    if not ((currentMiniTurn ~= nil and (player == activePlayers[currentMiniTurn] or player == getCurrentPlayerOwner())) or
        (currentMiniTurn == nil and (player == activePlayers[currentPlayer] or player == getCurrentPlayerOwner()))) then
        --only print a message if it is a tile (facing up) or an object dropped on a tile
        local xIndex, zIndex, _, _ = getFigureTileLocation(droppedObject)
        local yRotation = droppedObject.getRotation().y / 90
        if (tostring(droppedObject) == 'Card(Clone) (LuaGameObjectScript)' and
          (isWithinErrorMargin(0, droppedObject.getRotation().x, TILE_PLACEMENT_MARGIN * 90) or
          isWithinErrorMargin(360, droppedObject.getRotation().x, TILE_PLACEMENT_MARGIN * 90)) and
          (isWithinErrorMargin(0, droppedObject.getRotation().z, TILE_PLACEMENT_MARGIN * 90) or
          isWithinErrorMargin(360, droppedObject.getRotation().z, TILE_PLACEMENT_MARGIN * 90)))
          or tileGridOccupied(xIndex, zIndex) then
            if not spamLock then
                playerErrorMessage({"MESSAGE_DROP_WRONG_PLAYER"}, player)
                spamLock = true
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
            end
        end
        return
    end
    deleteMarkers()
    -- exit early if the player has been locked for dropping more than one object too quickly.
    if dropLock then
        if not spamLock then
            allErrorMessage({"MESSAGE_DROP_SPAM"}, player)
            spamLock = true
            Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
        end
    end
    dropLock = true
    lastDroppedObject_GUID = droppedObject.getGUID() --global used for the coroutines
    lastDroppedTime = os.clock()
    -- Checks if the dropped object was a single 'card' (tile)
    if tostring(droppedObject) == 'Card(Clone) (LuaGameObjectScript)' then
        if turnState == 'awaiting tile placement' then
            Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='checkTile', function_owner=nil, parameters={time=lastDroppedTime}, delay=TILE_PLACEMENT_DELAY})
        else
            dropLock = false
            if not spamLock then
                allErrorMessage({"MESSAGE_TILE_NOT_ALLOWED", {'{s1}', turnState}}, player)
                spamLock = true
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
            end
        end
    end
    if table.contains(FOLLOWER_TYPES, droppedObject.getVar('figureName')) or table.contains(SPECIAL_FIGURE_TYPES, droppedObject.getVar('figureName')) or droppedObject.getVar('figureName') == 'Tower' then
        if (currentMiniTurn ~= nil and (droppedObject.getVar('owner') == activePlayers[currentMiniTurn])) or
            (currentMiniTurn == nil and (droppedObject.getVar('owner') == activePlayers[currentPlayer])) then
            if turnState == 'awaiting figure decision'
                or turnState == 'replace finished wagons'
                or turnState == 'awaiting flier decision'
                or turnState == 'awaiting flier decision - phantom'
                or turnState == 'awaiting phantom decision'
                or turnState == 'prompt moving to carcassonne'
                or turnState == 'prompt moving from carcassonne'
                or turnState == 'game over - prompt moving from carcassonne' then
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='checkFigurePlacement', function_owner=nil, parameters={time=lastDroppedTime}, delay=FIGURE_PLACEMENT_DELAY})
            else
                dropLock = false
                if not spamLock then
                    if droppedObject.getVar('figureName') == 'Tower' then
                        allErrorMessage({"MESSAGE_TOWER_NOT_ALLOWED", {'{s1}', turnState}}, player)
                    elseif droppedObject.getVar('figureName') == 'Phantom' then
                        allErrorMessage({"MESSAGE_PHANTOM_NOT_ALLOWED", {'{s1}', turnState}}, player)
                    else
                        allErrorMessage({"MESSAGE_FIGURE_NOT_ALLOWED", {'{s1}', turnState}}, player)
                    end
                    spamLock = true
                    Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters={time=lastDroppedTime}, delay=SPAM_DELAY})
                end
            end
        else
            dropLock = false
            if not spamLock then
                if droppedObject.getVar('figureName') == 'Tower' then
                    playerErrorMessage({"MESSAGE_TOWER_WRONG_OWNER"}, player)
                elseif droppedObject.getVar('figureName') == 'Bridge' then
                    playerErrorMessage({"MESSAGE_BRIDGE_WRONG_OWNER"}, player)
                else
                    playerErrorMessage({"MESSAGE_FIGURE_WRONG_OWNER"}, player)
                end

                spamLock = true
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters=nil, delay=SPAM_DELAY})
            end
        end
    elseif droppedObject.getVar('figureName') == 'Fairy' then
        if turnState == 'awaiting figure decision' then
            Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='checkFigurePlacement', function_owner=nil, parameters={time=lastDroppedTime}, delay=FIGURE_PLACEMENT_DELAY})
            if highlightedTiles ~= nil then
                for x, highlightedColumn in pairs(highlightedTiles) do
                    for z, _ in pairs(highlightedColumn) do
                        getObjectFromGUID(tileGrid[x][z].tile_guid).highlightOff()
                    end
                end
            end
        else
            dropLock = false
            if not spamLock then
                allErrorMessage({"MESSAGE_FAIRY_NOT_ALLOWED", {'{s1}', turnState}}, player)
                spamLock = true
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters={time=lastDroppedTime}, delay=SPAM_DELAY})
            end
        end
    elseif droppedObject.getVar('figureName') == 'Count' then
        if turnState == 'prompt moving count' then
            Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='checkFigurePlacement', function_owner=nil, parameters={time=lastDroppedTime}, delay=FIGURE_PLACEMENT_DELAY})
        else
            dropLock = false
            if not spamLock then
                allErrorMessage({"MESSAGE_COUNT_NOT_ALLOWED", {'{s1}', turnState}}, player)
                spamLock = true
                Timer.create({identifier=droppedObject.getGUID() .. os.clock(), function_name='spamUnlock', function_owner=nil, parameters={time=lastDroppedTime}, delay=SPAM_DELAY})
            end
        end
    else
        dropLock = false
    end
end

function spamUnlock()
    spamLock = false
end

function onObjectPickUp(player, pickedUpObject)
    if lastDroppedObject_GUID == pickedUpObject.getGUID() then
        dropLock = false
        lastDroppedTime = 0
    end

    if tostring(pickedUpObject) == 'Card(Clone) (LuaGameObjectScript)' and getTileDataForTile(pickedUpObject).sides ~= nil then
        pickedUpObject.clearButtons()
        local xPosition = (pickedUpObject.getPosition().x + MIDDLE_OFFSET.x) / TILE_SPACING
        local zPosition = (pickedUpObject.getPosition().z + MIDDLE_OFFSET.z) / TILE_SPACING
        local xIndex = math.floor(xPosition + TILE_PLACEMENT_MARGIN * TILE_SPACING)
        local zIndex = math.floor(zPosition + TILE_PLACEMENT_MARGIN * TILE_SPACING)
        if tileGridOccupied(xIndex, zIndex) and tileGrid[xIndex][zIndex].tile_guid == pickedUpObject.getGUID() then
            if lastPlacedTileX ~= nil then
                clearFigureOptions()
                PnDClearSeducedKnights()
            end
            lastPlacedTileX = nil
            lastPlacedTileZ = nil
            removeTile(xIndex, zIndex, pickedUpObject)
            allGameMessage({"MESSAGE_TILE_REMOVED"}, NEUTRAL_COLOR)
            clearArbitraryButtons(true)
            turnState = 'awaiting tile placement'
            return stateHandler()
        end
    end

    if showMarkers == 'Hints' or showMarkers == 'Both' and
        ((currentMiniTurn ~= nil and (player == activePlayers[currentMiniTurn] or player == getCurrentPlayerOwner())) or
        (currentMiniTurn == nil and (player == activePlayers[currentPlayer] or player == getCurrentPlayerOwner()))) then
        gPickedUpObject = pickedUpObject
        startLuaCoroutine(self, 'showHintMarkers')
    end
end
